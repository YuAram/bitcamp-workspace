//Exam0350.java
//주제 : 부동소수점의 정규화 = 2진수로 바꾸기

package com.eomcs.basic.ex03;

class Exam0350 { 
 public static void main(String[] args) { 

 System.out.println(12.375f); // 32비트 부동소수점 
 System.out.println(12.375); // 64비트 부동소수점 
 
 // 12.375(부동소수점)
 // ==> IEEE 754 규정에 따라 동 소수점을 2진수로 변환한다.
 // 0b01000001_01000110_00000000_00000000 (2진수)
 // ==> 0x41460000 (16진수)
 }
}

//방법
//1) 소수점 이상 부분을 2진수로 변환
//- 12(10진수)
//- 0b1100(2진수)
//
//2) 소수점 이하 부분을 2진수로 변환
//- 0.375
//- 소수점을 2로 곱하여 나온 결과에서 정수 부분만을 차례대로 표기한다.
//- 소수 부분이 0이거나 반복되면 계산을 멈춘다.
//- 예: 0.375(10진수)
//0.375 * 2 = 0.75  --> 0
//0.75 * 2  = 1.5   --> 1
//0.5 * 2   = 1.0   --> 1
//=> 0.011(2진수)
//
//3) 소수점 이상 2진수와 소수점 이하 2진수를 합친다.
//=> 12(1100) + 0.375(0.011) == 1100.011
//
//4) 정규화
//=> 소수점 위치를 조정하여 가수부와 지수부를 분리한다.
//4.1) 소수점 왼쪽에 1만 남도록 소수점 위치를 이동한다.
//   - 1.100011 * 2**3 = 1100.011
//4.2) 소수점 앞의 1은 무조건 1이기 때문에 버린다.
//   = 100011 * 2**3
//4.3) 가수부와 지수부로 분리한다.
//   가수부
//    - Sign Magnitude로 표현한다.
//    - 따라서 음수나 양수나 같은 2진수 값을 갖는다.
//    - 예) 100011
//   지수부
//    - 2의 제곱승 값이다.
//    - Excess-K 로 표현한다.
//    - K값은 127이다.
//    - 예) 3(2의 제곱승) + 127(K값: bias) = 130
//      130 = 10000010(2진수)
//4.4) 32비트 메모리에 담기
//   - [1:부호비트][8:지수부][23:가수부] = 32bit
//   - 예) 0_10000010_10001100000000000000000
//       = 01000001_01000110_00000000_00000000 (2진수)
//       = 41_46_00_00 (16진수)
//4.4) 64비트 메모리에 담기
//   - [1:부호비트][11:지수부][52:가수부] = 64bit
//   - 예) 40_28_c0_00 (16진수)
